---
const { m } = Astro.props;
const LANGUAGES = [
  { name: "English", code: "en", path: "/", flag: "ðŸ‡ªðŸ‡¸" },
  { name: "EspaÃ±ol", code: "es", path: "/es/", flag: "ðŸ‡ºðŸ‡¸" }
];
const currentLangFromPath = Astro.url.pathname.startsWith('/es') ? 'es' : 'en';
const DEFAULT_FLAG = LANGUAGES.find((lang) => lang.code === currentLangFromPath)?.flag ?? LANGUAGES[0].flag;
const DEFAULT_LABEL = LANGUAGES.find((lang) => lang.code === currentLangFromPath)?.name ?? LANGUAGES[0].name;
---
<div class="relative ml-1 mr-1">
  <button
    id="lang-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
    type="button"
    aria-haspopup="listbox"
    aria-expanded="false"
    aria-label={`${DEFAULT_LABEL} (${currentLangFromPath.toUpperCase()})`}
  >
    <span class="sr-only">{m.elige_idioma}</span>
    <span id="lang-icon" class="size-5 transition-all">
      {DEFAULT_FLAG}
    </span>
  </button>

  <div
    id="langs-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul role="listbox" aria-label={m.elige_idioma}>
      {LANGUAGES.map((language) => (
        <li
          role="option"
          tabindex={0}
          class="langs-menu-option px-2 py-1.5 cursor-pointer rounded-sm hover:bg-neutral-400/40 dark:hover:bg-gray-500/50"
          data-lang={language.code}
          data-path={language.path}
          data-flag={language.flag}
        >
          {language.name}
        </li>
      ))}
    </ul>
  </div>
</div>

<style>
  #langs-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  .langs-menu-option[aria-current="true"] {
    background: rgba(156, 163, 175, 0.25);
    font-weight: 600;
  }

  :where(.dark) .langs-menu-option[aria-current="true"] {
    background: rgba(107, 114, 128, 0.35);
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>


<script is:inline>
(() => {
  const langsMenu = document.getElementById('langs-menu');
  const langToggleBtn = document.getElementById('lang-toggle-btn');
  const langIcon = document.getElementById('lang-icon');
  if (!langsMenu || !langToggleBtn || !langIcon) {
    return;
  }

  const optionNodes = Array.from(langsMenu.querySelectorAll('.langs-menu-option'));
  if (!optionNodes.length) {
    return;
  }

  const normalizePath = (value) => {
    if (!value) return '/';
    try {
      const url = new URL(value, window.location.origin);
      value = url.pathname;
    } catch (error) {
      // Ignore and use raw value
    }
    const trimmed = value.replace(/\/+$/g, '');
    return trimmed === '' ? '/' : trimmed;
  };

  const languages = optionNodes
    .map((node, index) => {
      const code = node.dataset.lang || `lang-${index}`;
      const path = node.dataset.path || '/';
      const flag = (node.dataset.flag || node.textContent || '').trim();
      const name = (node.textContent || code).trim();
      return { code, path, flag, name, node };
    })
    .filter((item) => Boolean(item.code));

  if (!languages.length) {
    return;
  }

  const fallbackFlag = (langIcon.textContent || '').trim() || languages[0].flag;

  const findLanguage = (code) => languages.find((item) => item.code === code);
  const getLangFromPath = () => {
    const currentPath = normalizePath(window.location.pathname);
    const match = languages.find((item) => normalizePath(item.path) === currentPath);
    return match?.code || languages[0].code;
  };

  const getStoredLang = () => {
    try {
      return localStorage.getItem('lang');
    } catch (error) {
      return null;
    }
  };

  const setStoredLang = (code) => {
    try {
      localStorage.setItem('lang', code);
    } catch (error) {
      // Ignore storage errors (private mode, etc.)
    }
  };

  const setMenuState = (isOpen) => {
    langsMenu.classList.toggle('open', isOpen);
    langToggleBtn.setAttribute('aria-expanded', String(isOpen));
  };

  let activeLang = languages[0].code;

  const applyLangUi = (code) => {
    const lang = findLanguage(code) || languages[0];
    activeLang = lang.code;
    langIcon.textContent = lang.flag || fallbackFlag;
    langToggleBtn.setAttribute('aria-label', `${lang.name} (${lang.code.toUpperCase()})`);

    languages.forEach((item) => {
      const isActive = item.code === lang.code;
      item.node.setAttribute('aria-current', isActive ? 'true' : 'false');
      item.node.setAttribute('aria-selected', isActive ? 'true' : 'false');
      item.node.classList.toggle('font-semibold', isActive);
    });
  };

  const navigateTo = (code) => {
    const lang = findLanguage(code);
    if (!lang) return;
    const current = normalizePath(window.location.pathname);
    const target = normalizePath(lang.path);
    if (current !== target) {
      window.location.href = lang.path;
    }
  };

  const setLanguage = (code, { redirect = false } = {}) => {
    const lang = findLanguage(code) || languages[0];
    setStoredLang(lang.code);
    applyLangUi(lang.code);
    if (redirect) {
      navigateTo(lang.code);
    }
  };

  const getActiveLang = () => activeLang;

  const getNextLang = (current) => {
    const index = languages.findIndex((item) => item.code === current);
    if (index === -1) return languages[0].code;
    return languages[(index + 1) % languages.length].code;
  };

  const pathLang = getLangFromPath();
  const storedLang = findLanguage(getStoredLang());
  const initialLang = storedLang?.code || pathLang;

  setLanguage(initialLang);

  if (storedLang && storedLang.code !== pathLang) {
    navigateTo(storedLang.code);
  }

  if (!storedLang) {
    setStoredLang(initialLang);
  }

  document.addEventListener('click', () => setMenuState(false));
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      setMenuState(false);
    }
  });

  langToggleBtn.addEventListener('click', (event) => {
    event.stopPropagation();
    if (languages.length === 2 && !langsMenu.classList.contains('open')) {
      const nextLang = getNextLang(getActiveLang());
      if (nextLang !== getActiveLang()) {
        setLanguage(nextLang, { redirect: true });
        return;
      }
    }
    setMenuState(!langsMenu.classList.contains('open'));
  });

  langToggleBtn.addEventListener('keydown', (event) => {
    if (['Enter', ' ', 'ArrowDown'].includes(event.key)) {
      event.preventDefault();
      setMenuState(true);
    }
  });

  languages.forEach((item) => {
    const activate = (event) => {
      event.stopPropagation();
      setLanguage(item.code, { redirect: true });
      setMenuState(false);
    };

    item.node.addEventListener('click', activate);
    item.node.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        activate(event);
      }
    });
  });
})();
</script>


